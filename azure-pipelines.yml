jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet tool install -g Cake.Tool --version 0.30.0
      export PATH="$PATH:$HOME/.dotnet/tools"
      dotnet cake build.cake -Target="Azure-Linux" -Platform="Any CPU" -Configuration="Release"
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Build.SourcesDirectory)/artifacts/tests/*.trx'
- job: macOS
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet tool install -g Cake.Tool --version 0.30.0
      export PATH="$PATH:$HOME/.dotnet/tools"
      dotnet cake build.cake -Target="Azure-macOS" -Platform="Any CPU" -Configuration="Release"
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Build.SourcesDirectory)/artifacts/tests/*.trx'
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      set COREHOST_TRACE=0
      set DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      set DOTNET_CLI_TELEMETRY_OPTOUT=1
      where dotnet
      dotnet --info
      dotnet tool install -g Cake.Tool --version 0.30.0
      set PATH=%PATH%;%USERPROFILE%\.dotnet\tools
      dotnet cake build.cake -Target="Azure-Windows" -Platform="Any CPU" -Configuration="Release"
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)\artifacts\nuget'
      artifactName: 'NuGet'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Build.SourcesDirectory)\artifacts\tests\*.trx'
- job: Linux_Publish_ubuntu_14_04_x64
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet publish ./src/Core2D.UI.Avalonia/Core2D.UI.Avalonia.csproj -r ubuntu.14.04-x64 -c Release -f netcoreapp2.1
      cp $HOME/.nuget/packages/avalonia.skia.linux.natives/1.60.0.1/runtimes/linux-x64/native/libSkiaSharp.so src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/ubuntu.14.04-x64/publish/libSkiaSharp.so
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/ubuntu.14.04-x64/publish'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-publish-ubuntu.14.04-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Publish-Linux-ubuntu.14.04-x64'
- job: Linux_Publish_debian_8_x64
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet publish ./src/Core2D.UI.Avalonia/Core2D.UI.Avalonia.csproj -r debian.8-x64 -c Release -f netcoreapp2.1
      cp $HOME/.nuget/packages/avalonia.skia.linux.natives/1.60.0.1/runtimes/linux-x64/native/libSkiaSharp.so src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/debian.8-x64/publish/libSkiaSharp.so
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/debian.8-x64/publish'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-publish-debian.8-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Publish-Linux-debian.8-x64'
- job: macOS_Publish_osx_10_12_x64
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet publish ./src/Core2D.UI.Avalonia/Core2D.UI.Avalonia.csproj -r osx.10.12-x64 -c Release -f netcoreapp2.1
      cp $HOME/.nuget/packages/skiasharp/1.60.0/runtimes/osx/native/libSkiaSharp.dylib src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/osx.10.12-x64/publish/libSkiaSharp.dylib
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/osx.10.12-x64/publish'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-publish-osx.10.12-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Publish-macOS-osx.10.12-x64'
- job: Windows_Publish_win7_x64
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      set COREHOST_TRACE=0
      set DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      set DOTNET_CLI_TELEMETRY_OPTOUT=1
      where dotnet
      dotnet --info
      dotnet publish .\src\Core2D.UI.Avalonia\Core2D.UI.Avalonia.csproj -r win7-x64 -c Release -f netcoreapp2.1
      copy c:\Users\%USERNAME%\.nuget\packages\skiasharp\1.60.0\runtimes\win7-x64\native\libSkiaSharp.dll src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish
      copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Redist\MSVC\14.15.26706\x64\Microsoft.VC141.CRT\msvcp140.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish
      copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Redist\MSVC\14.15.26706\x64\Microsoft.VC141.CRT\vcruntime140.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish
      copy "C:\Program Files (x86)\Google\Chrome\Application\68.0.3440.106\d3dcompiler_47.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish
      copy "C:\Program Files (x86)\Google\Chrome\Application\68.0.3440.106\libegl.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish
      copy "C:\Program Files (x86)\Google\Chrome\Application\68.0.3440.106\libglesv2.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)\src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win7-x64\publish'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-publish-win7-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Publish-Windows-win7-x64'
- job: Linux_CoreRT_linux_x64
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main"
      sudo apt-get update
      sudo apt -o Acquire::AllowInsecureRepositories=true update
      sudo apt-get install -y clang-3.9 libicu55 uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev
      clang-3.9 --version
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet publish ./src/Core2D.UI.Avalonia/Core2D.UI.Avalonia.csproj -r linux-x64 -c Release -f netcoreapp2.1 -p:CoreRT=True
      strip ./src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/linux-x64/native/Core2D.UI.Avalonia
      cp $HOME/.nuget/packages/avalonia.skia.linux.natives/1.60.0.1/runtimes/linux-x64/native/libSkiaSharp.so src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/linux-x64/native/libSkiaSharp.so
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/linux-x64/native'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-native-linux-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'CoreRT-Linux-linux-x64'
- job: macOS_CoreRT_osx_x64
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      export COREHOST_TRACE=0
      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      export DOTNET_CLI_TELEMETRY_OPTOUT=1
      which dotnet
      dotnet --info
      dotnet publish ./src/Core2D.UI.Avalonia/Core2D.UI.Avalonia.csproj -r osx-x64 -c Release -f netcoreapp2.1 -p:CoreRT=True
      strip ./src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/osx-x64/native/Core2D.UI.Avalonia
      cp $HOME/.nuget/packages/skiasharp/1.60.0/runtimes/osx/native/libSkiaSharp.dylib src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/osx-x64/native/libSkiaSharp.dylib
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/src/Core2D.UI.Avalonia/bin/AnyCPU/Release/netcoreapp2.1/osx-x64/native'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-native-osx-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'CoreRT-macOS-osx-x64'
- job: Windows_CoreRT_win_x64
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.1.401'
  - script: |
      set COREHOST_TRACE=0
      set DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
      set DOTNET_CLI_TELEMETRY_OPTOUT=1
      where dotnet
      dotnet --info
      dotnet publish .\src\Core2D.UI.Avalonia\Core2D.UI.Avalonia.csproj -r win-x64 -c Release -f netcoreapp2.1 -p:CoreRT=True
      copy c:\Users\%USERNAME%\.nuget\packages\skiasharp\1.60.0\runtimes\win7-x64\native\libSkiaSharp.dll src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native
      copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Redist\MSVC\14.15.26706\x64\Microsoft.VC141.CRT\msvcp140.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native
      copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Redist\MSVC\14.15.26706\x64\Microsoft.VC141.CRT\vcruntime140.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native
      copy "C:\Program Files (x86)\Google\Chrome\Application\68.0.3440.106\d3dcompiler_47.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native
      copy "C:\Program Files (x86)\Google\Chrome\Application\68.0.3440.106\libegl.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native
      copy "C:\Program Files (x86)\Google\Chrome\Application\68.0.3440.106\libglesv2.dll" src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)\src\Core2D.UI.Avalonia\bin\AnyCPU\Release\netcoreapp2.1\win-x64\native'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Core2D.UI.Avalonia-native-win-x64-$(Build.BuildId).zip'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'CoreRT-Windows-win-x64'
