<!-- Copyright (c) Wiesław Šoltés. All rights reserved. -->
<!-- Licensed under the MIT license. See LICENSE file in the project root for full license information. -->
<Application x:Class="Core2D.Wpf.App" 
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib" 
             xmlns:local="clr-namespace:Core2D.Wpf" 
             xmlns:converters="clr-namespace:Core2D.Wpf.Converters" 
             xmlns:core="clr-namespace:Core2D;assembly=Core2D" 
             xmlns:custom="clr-namespace:Core2D.Wpf.Controls.Custom"
             xmlns:lists="clr-namespace:Core2D.Wpf.Controls.Custom.Lists"
             xmlns:data="clr-namespace:Core2D.Wpf.Controls.Data"
             xmlns:editor="clr-namespace:Core2D.Wpf.Controls.Editor"
             xmlns:path="clr-namespace:Core2D.Wpf.Controls.Path"
             xmlns:project="clr-namespace:Core2D.Wpf.Controls.Project"
             xmlns:shapes="clr-namespace:Core2D.Wpf.Controls.Shapes"
             xmlns:state="clr-namespace:Core2D.Wpf.Controls.State"
             xmlns:style="clr-namespace:Core2D.Wpf.Controls.Style"
             xmlns:p="clr-namespace:Core2D.Wpf.Properties">
    <Application.Resources>
        <!-- Converters -->
        <converters:ArgbColorToBrushConverter x:Key="ArgbColorToBrushConverter"/>
        <converters:ArgbColorToBrushMultiConverter x:Key="ArgbColorToBrushMultiConverter"/>
        <converters:BooleanToStringConverter x:Key="BooleanToStarConverter" FalseValue="" TrueValue="*"/>
        <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
        <converters:ObjectEqualityConverter x:Key="ObjectEqualityConverter"/>
        <!-- Brushes -->
        <SolidColorBrush x:Key="BackgroundColor" Color="White"/>
        <DrawingBrush x:Key="CheckerBoard" Viewport="0,0,20,20" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
            <DrawingBrush.Drawing>
                <DrawingGroup>
                    <GeometryDrawing Brush="DarkGray">
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <RectangleGeometry Rect="0,0,10,10"/>
                                <RectangleGeometry Rect="10,10,10,10"/>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <GeometryDrawing Brush="LightGray">
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <RectangleGeometry Rect="10,0,10,10"/>
                                <RectangleGeometry Rect="0,10,10,10"/>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingGroup>
            </DrawingBrush.Drawing>
        </DrawingBrush>
        <!-- Menus -->
        <ControlTemplate x:Key="PropertiesMenuControlTemplateKey">
            <Menu Background="Transparent" HorizontalAlignment="Right">
                <MenuItem Command="{x:Static core:Commands.AddPropertyCommand}" CommandParameter="{Binding}" Header="+"/>
            </Menu>
        </ControlTemplate>
        <ControlTemplate x:Key="RecordMenuControlTemplateKey">
            <Menu Background="Transparent" HorizontalAlignment="Right">
                <MenuItem Command="{x:Static core:Commands.ResetRecordCommand}" CommandParameter="{Binding}" Header="X"/>
            </Menu>
        </ControlTemplate>
        <ControlTemplate x:Key="ColumnsMenuControlTemplateKey">
            <Menu Background="Transparent" HorizontalAlignment="Right">
                <MenuItem Command="{x:Static core:Commands.AddColumnCommand}" CommandParameter="{Binding}" Header="+"/>
            </Menu>
        </ControlTemplate>
        <!-- Context Menus -->
        <ContextMenu x:Key="ContainerContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Te_mplate" Tag="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" ItemsSource="{Binding Editor.Project.Templates}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}"/>
                        <Setter Property="Command" Value="{x:Static core:Commands.ApplyTemplateCommand}"/>
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                        <Setter Property="IsCheckable" Value="True"/>
                        <Setter Property="IsChecked" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Value="True">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource ObjectEqualityConverter}">
                                        <Binding Path="Tag.Editor.Project.CurrentContainer.Template" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}"/>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource Self}"/>
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="IsChecked" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <Separator/>
            <MenuItem Header="Insert Container Bef_ore" InputGestureText="" Command="{x:Static core:Commands.InsertContainerBeforeCommand}" CommandParameter="{Binding}"/>
            <MenuItem Header="Insert Container Aft_er" InputGestureText="" Command="{x:Static core:Commands.InsertContainerAfterCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="Cu_t" InputGestureText="Ctrl+X" Command="{x:Static core:Commands.CutCommand}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Copy" InputGestureText="Ctrl+C" Command="{x:Static core:Commands.CopyCommand}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Paste" InputGestureText="Ctrl+V" Command="{x:Static core:Commands.PasteCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="_Delete" InputGestureText="Del" Command="{x:Static core:Commands.DeleteCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="E_xport" InputGestureText="Ctrl+E" Command="{x:Static core:Commands.ExportCommand}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="DocumentContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="_Add Container" InputGestureText="Ctrl+N" Command="{x:Static core:Commands.AddContainerCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="Insert Document Bef_ore" InputGestureText="" Command="{x:Static core:Commands.InsertDocumentBeforeCommand}" CommandParameter="{Binding}"/>
            <MenuItem Header="Insert Document Aft_er" InputGestureText="" Command="{x:Static core:Commands.InsertDocumentAfterCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="Cu_t" InputGestureText="Ctrl+X" Command="{x:Static core:Commands.CutCommand}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Copy" InputGestureText="Ctrl+C" Command="{x:Static core:Commands.CopyCommand}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Paste" InputGestureText="Ctrl+V" Command="{x:Static core:Commands.PasteCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="_Delete" InputGestureText="Del" Command="{x:Static core:Commands.DeleteCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="E_xport" InputGestureText="Ctrl+E" Command="{x:Static core:Commands.ExportCommand}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="PojectContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="_Add Document" InputGestureText="Ctrl+N" Command="{x:Static core:Commands.AddDocumentCommand}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="E_xport" InputGestureText="Ctrl+E" Command="{x:Static core:Commands.ExportCommand}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <!-- Styles -->
        <Style x:Key="TextBlockLeftStyleKey" TargetType="TextBlock">
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="TextAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="TextBoxLeftStyleKey" TargetType="TextBox">
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="TextAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="TextBlockCenterStyleKey" TargetType="TextBlock">
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="TextBoxCenterStyleKey" TargetType="TextBox">
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="CheckBoxStyleKey" TargetType="CheckBox">
            <Setter Property="Margin" Value="5,2,5,2"/>
        </Style>
        <Style x:Key="ComboBoxStyleKey" TargetType="ComboBox">
            <Setter Property="Margin" Value="5,2,5,2"/>
        </Style>
        <Style x:Key="SliderStyleKey" TargetType="Slider">
            <Setter Property="Margin" Value="5,2,5,2"/>
        </Style>
        <!-- Style -->
        <DataTemplate DataType="{x:Type core:ArgbColor}">
            <style:ArgbColorControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:ArrowStyle}">
            <style:ArrowStyleControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:FontStyle}">
            <style:FontStyleControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:TextStyle}">
            <style:TextStyleControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:LineFixedLength}">
            <style:LineFixedLengthControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:LineStyle}">
            <style:LineStyleControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:ShapeStyle}">
            <style:ShapeStyleControl/>
        </DataTemplate>
        <!-- Data -->
        <DataTemplate DataType="{x:Type core:Record}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="40*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="60*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <GridSplitter Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Width="10" Background="Transparent" ResizeBehavior="PreviousAndNext" ShowsPreview="True"/>
                <TextBlock Grid.Column="0" Grid.Row="0" Margin="5,2,0,2" VerticalAlignment="Center" Text="Name">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBlock Grid.Column="2" Grid.Row="0" Margin="0,2,5,2" VerticalAlignment="Center" Text="Value">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <ItemsControl VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="1" Grid.Column="0" ItemsSource="{Binding Columns, UpdateSourceTrigger=PropertyChanged}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid Height="Auto" VerticalAlignment="Top">
                                <TextBox Margin="5,2,0,2" VerticalAlignment="Center" Text="{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <ItemsControl VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding Values, UpdateSourceTrigger=PropertyChanged}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid Height="Auto" VerticalAlignment="Top">
                                <TextBox Margin="0,2,5,2" VerticalAlignment="Center" Text="{Binding Path=Content, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:Database}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Text="Name" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" BorderBrush="{x:Null}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="0" Grid.Column="1"/>
                <TabControl Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
                    <TabItem Header="Columns">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Control Template="{StaticResource ColumnsMenuControlTemplateKey}" Grid.Row="0" Margin="2,0,2,0"/>
                            <Grid Height="Auto" VerticalAlignment="Top" Grid.Row="1">
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Columns.Length, FallbackValue=0}" Value="0">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="30"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Margin="5,2,5,2" VerticalAlignment="Center" Text="Name"/>
                            </Grid>
                            <ItemsControl x:Name="columnsItemsControls" VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="2" ItemsSource="{Binding Columns, UpdateSourceTrigger=PropertyChanged}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Height="Auto" VerticalAlignment="Top">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="30"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <TextBox Grid.Column="0" Grid.Row="0" Margin="5,2,5,2" VerticalAlignment="Center" Text="{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Button Grid.Column="1" Grid.Row="0" Margin="5,2,5,2" VerticalAlignment="Center" Content="-" Command="{x:Static core:Commands.RemoveColumnCommand}" CommandParameter="{Binding}"/>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Current Record">
                        <ContentControl Content="{Binding CurrentRecord}"/>
                    </TabItem>
                </TabControl>
            </Grid>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:Data}">
            <TabControl>
                <TabItem Header="Record">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Control Template="{StaticResource RecordMenuControlTemplateKey}" Grid.Row="0" Margin="2,0,2,0"/>
                        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                            <ContentControl Content="{Binding Record}"/>
                        </ScrollViewer>
                    </Grid>
                </TabItem>
                <TabItem Header="Properties">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="40*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="60*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Control Template="{StaticResource PropertiesMenuControlTemplateKey}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Margin="2,0,2,0"/>
                        <GridSplitter Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Width="10" Background="Transparent" ResizeBehavior="PreviousAndNext" ShowsPreview="True"/>
                        <TextBlock Grid.Column="0" Grid.Row="1" Margin="5,2,0,2" VerticalAlignment="Center" Text="Name">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Properties.Length, FallbackValue=0}" Value="0">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBlock Grid.Column="2" Grid.Row="1" Margin="0,2,5,2" VerticalAlignment="Center" Text="Value">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Properties.Length, FallbackValue=0}" Value="0">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <ItemsControl VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="2" ItemsSource="{Binding Properties, UpdateSourceTrigger=PropertyChanged}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid Height="Auto" VerticalAlignment="Top">
                                        <TextBox Margin="5,2,0,2" VerticalAlignment="Center" Text="{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <ItemsControl x:Name="propertiesItemsControls" VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="2" Grid.Row="2" ItemsSource="{Binding Properties, UpdateSourceTrigger=PropertyChanged}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid Height="Auto" VerticalAlignment="Top">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="30"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBox Grid.Column="0" Margin="0,2,5,2" VerticalAlignment="Center" Text="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        <Button Grid.Column="1" Margin="5,0,5,0" VerticalAlignment="Center" Content="-" Command="{x:Static core:Commands.RemovePropertyCommand}" CommandParameter="{Binding}"/>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Grid>
                </TabItem>
            </TabControl>
        </DataTemplate>
        <!-- State -->
        <DataTemplate DataType="{x:Type core:ShapeState}">
            <state:ShapeStateControl/>
        </DataTemplate>
        <!-- Shapes -->
        <DataTemplate DataType="{x:Type core:XPoint}">
            <shapes:PointControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XLine}">
            <shapes:LineControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XText}">
            <shapes:TextControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XRectangle}">
            <shapes:RectangleControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XEllipse}">
            <shapes:EllipseControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XImage}">
            <shapes:ImageControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XArc}">
            <shapes:ArcControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XBezier}">
            <shapes:BezierControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XQBezier}">
            <shapes:QBezierControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XGroup}">
            <shapes:GroupControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XPath}">
            <shapes:PathControl/>
        </DataTemplate>
        <!-- Path -->
        <DataTemplate DataType="{x:Type core:XPathSize}">
            <path:PathSizeControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XArcSegment}">
            <path:ArcSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XBezierSegment}">
            <path:BezierSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XLineSegment}">
            <path:LineSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XPolyBezierSegment}">
            <path:PolyBezierSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XPolyLineSegment}">
            <path:PolyLineSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XPolyQuadraticBezierSegment}">
            <path:PolyQuadraticBezierSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XQuadraticBezierSegment}">
            <path:QuadraticBezierSegmentControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XPathFigure}">
            <path:PathFigureControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:XPathGeometry}">
            <path:PathGeometryControl/>
        </DataTemplate>
        <!-- Project -->
        <DataTemplate DataType="{x:Type core:Options}">
            <TabControl>
                <TabItem Header="{x:Static p:Resources.OptionsHeaderGeneral}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{x:Static p:Resources.OptionsSnapToGrid}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                        <CheckBox Content="" IsChecked="{Binding SnapToGrid}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="0" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsSnapX}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="1" Grid.Column="0"/>
                        <TextBox Text="{Binding SnapX, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="1" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsSnapY}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="2" Grid.Column="0"/>
                        <TextBox Text="{Binding SnapY, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="2" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsHitTreshold}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="3" Grid.Column="0"/>
                        <TextBox Text="{Binding HitTreshold, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="3" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsMoveMode}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="4" Grid.Column="0"/>
                        <ComboBox ItemsSource="{x:Static core:Enums.MoveModeValues}" SelectedItem="{Binding MoveMode}" Style="{StaticResource ComboBoxStyleKey}" Grid.Row="4" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsTryToConnect}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="5" Grid.Column="0"/>
                        <CheckBox Content="" IsChecked="{Binding TryToConnect}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="5" Grid.Column="1"/>
                    </Grid>
                </TabItem>
                <TabItem Header="{x:Static p:Resources.OptionsHeaderDefaults}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{x:Static p:Resources.OptionsDefaultIsStroked}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                        <CheckBox Content="" IsChecked="{Binding DefaultIsStroked}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="0" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsDefaultIsFilled}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="1" Grid.Column="0"/>
                        <CheckBox Content="" IsChecked="{Binding DefaultIsFilled}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="1" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsDefaultIsClosed}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="2" Grid.Column="0"/>
                        <CheckBox Content="" IsChecked="{Binding DefaultIsClosed}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="2" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsDefaultIsSmoothJoin}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="3" Grid.Column="0"/>
                        <CheckBox Content="" IsChecked="{Binding DefaultIsSmoothJoin}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="3" Grid.Column="1"/>
                        <TextBlock Text="{x:Static p:Resources.OptionsDefaultFillRule}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="4" Grid.Column="0"/>
                        <ComboBox ItemsSource="{x:Static core:Enums.XFillRuleValues}" SelectedItem="{Binding DefaultFillRule}" Style="{StaticResource ComboBoxStyleKey}" Grid.Row="4" Grid.Column="1"/>
                    </Grid>
                </TabItem>
                <TabItem Header="{x:Static p:Resources.OptionsHeaderAdvanced}">
                    <TabControl>
                        <TabItem Header="PointShape">
                            <ContentControl Content="{Binding PointShape}"/>
                        </TabItem>
                        <TabItem Header="PointStyle">
                            <ContentControl Content="{Binding PointStyle}"/>
                        </TabItem>
                        <TabItem Header="SelectionStyle">
                            <ContentControl Content="{Binding SelectionStyle}"/>
                        </TabItem>
                        <TabItem Header="HelperStyle">
                            <ContentControl Content="{Binding HelperStyle}"/>
                        </TabItem>
                    </TabControl>
                </TabItem>
            </TabControl>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:Project}">
            <StackPanel>
                <Expander Header="{x:Static p:Resources.ProjectOptions}" IsExpanded="False">
                    <ContentControl Content="{Binding Options}"/>
                </Expander>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="40"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2"/>
                </Grid>
            </StackPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:Document}">
            <StackPanel>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="60"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="{x:Static p:Resources.DocumentName}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                    <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="0" Grid.Column="1"/>
                </Grid>
            </StackPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:Container}">
            <TabControl>
                <TabItem Header="{x:Static p:Resources.WindowTitleContainer}">
                    <StackPanel>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{x:Static p:Resources.ContainerName}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                            <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" BorderBrush="{x:Null}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="0" Grid.Column="1"/>
                        </Grid>
                        <Grid>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsTemplate}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{x:Static p:Resources.ContainerWidth}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                            <TextBlock Text="{x:Static p:Resources.ContainerHeight}" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="1" Grid.Column="0"/>
                            <TextBox Text="{Binding Width, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="0" Grid.Column="1"/>
                            <TextBox Text="{Binding Height, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="1" Grid.Column="1"/>
                        </Grid>
                        <Expander Header="{x:Static p:Resources.ContainerBackground}">
                            <Expander.Style>
                                <Style TargetType="Expander">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsTemplate}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Expander.Style>
                            <ContentControl Content="{Binding Background}"/>
                        </Expander>
                        <Expander Header="{x:Static p:Resources.ContainerProperties}" IsExpanded="True">
                            <ContentControl Content="{Binding Data}"/>
                        </Expander>
                    </StackPanel>
                </TabItem>
                <TabItem Header="{x:Static p:Resources.ContainerTemplate}">
                    <TabItem.Style>
                        <Style TargetType="TabItem">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsTemplate}" Value="False">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TabItem.Style>
                    <ContentControl Content="{Binding Template}"/>
                </TabItem>
                <TabItem Header="{x:Static p:Resources.WindowTitleLayers}">
                    <Grid>
                        <Grid.Resources>
                            <ControlTemplate x:Key="LayersMenu">
                                <Menu Background="Transparent" HorizontalAlignment="Right">
                                    <MenuItem Command="{x:Static core:Commands.AddLayerCommand}" Header="+"/>
                                    <MenuItem Command="{x:Static core:Commands.RemoveLayerCommand}" Header="-"/>
                                </Menu>
                            </ControlTemplate>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Control Template="{StaticResource LayersMenu}" Grid.Row="0" Margin="2,0,2,0"/>
                        <lists:LayerDragAndDropListBox DataContext="{Binding Layers}" Tag="{Binding DataContext.Editor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" ItemsSource="{Binding}" SelectedItem="{Binding DataContext.Editor.Project.CurrentContainer.CurrentLayer, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" HorizontalContentAlignment="Stretch" BorderBrush="{x:Null}" Grid.Row="1">
                            <lists:LayerDragAndDropListBox.Resources>
                                <ContextMenu x:Key="LayerContextMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="_Add Layer" InputGestureText="Ctrl+N" Command="{x:Static core:Commands.AddLayerCommand}"/>
                                    <Separator/>
                                    <MenuItem Header="_Delete" InputGestureText="Del" Command="{x:Static core:Commands.RemoveLayerCommand}"/>
                                </ContextMenu>
                            </lists:LayerDragAndDropListBox.Resources>
                            <lists:LayerDragAndDropListBox.InputBindings>
                                <KeyBinding Command="{x:Static core:Commands.AddLayerCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lists:LayerDragAndDropListBox}}}" Gesture="Ctrl+N"/>
                                <KeyBinding Command="{x:Static core:Commands.RemoveLayerCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lists:LayerDragAndDropListBox}}}" Gesture="Del"/>
                            </lists:LayerDragAndDropListBox.InputBindings>
                            <lists:LayerDragAndDropListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="ContextMenu" Value="{StaticResource LayerContextMenu}"/>
                                </Style>
                            </lists:LayerDragAndDropListBox.ItemContainerStyle>
                            <lists:LayerDragAndDropListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="25"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <CheckBox IsChecked="{Binding IsVisible}" Margin="0,5,0,5" Content="" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Column="0"/>
                                        <TextBlock Text="{Binding Name}" Margin="0,5,0,5" Grid.Column="1"/>
                                    </Grid>
                                </DataTemplate>
                            </lists:LayerDragAndDropListBox.ItemTemplate>
                        </lists:LayerDragAndDropListBox>
                        <StackPanel Grid.Row="2" Margin="2">
                            <StackPanel.Style>
                                <Style TargetType="StackPanel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <Expander Header="Name" IsExpanded="True">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged, Delay=500}" BorderBrush="{x:Null}" Margin="5,2,5,2" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" TextAlignment="Left" VerticalAlignment="Center"/>
                                </Grid>
                            </Expander>
                        </StackPanel>
                    </Grid>
                </TabItem>
                <TabItem Header="{x:Static p:Resources.WindowTitleShapes}">
                    <Grid>
                        <Grid.Resources>
                            <ControlTemplate x:Key="ShapesMenu">
                                <Menu Background="Transparent" HorizontalAlignment="Right">
                                    <MenuItem Command="{x:Static core:Commands.RemoveShapeCommand}" Header="-"/>
                                </Menu>
                            </ControlTemplate>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Control Template="{StaticResource ShapesMenu}" Grid.Row="0" Margin="2,0,2,0"/>
                        <lists:BaseShapeDragAndDropListBox DataContext="{Binding CurrentLayer.Shapes}" Tag="{Binding DataContext.Editor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" ItemsSource="{Binding}" SelectedItem="{Binding DataContext.Editor.Project.CurrentContainer.CurrentShape, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" BorderBrush="{x:Null}" HorizontalContentAlignment="Stretch" Grid.Row="1">
                            <lists:BaseShapeDragAndDropListBox.Resources>
                                <ContextMenu x:Key="ShapeContextMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                    <MenuItem Header="_Delete" InputGestureText="Del" Command="{x:Static core:Commands.RemoveShapeCommand}"/>
                                </ContextMenu>
                            </lists:BaseShapeDragAndDropListBox.Resources>
                            <lists:BaseShapeDragAndDropListBox.InputBindings>
                                <KeyBinding Command="{x:Static core:Commands.RemoveShapeCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lists:BaseShapeDragAndDropListBox}}}" Gesture="Del"/>
                            </lists:BaseShapeDragAndDropListBox.InputBindings>
                            <lists:BaseShapeDragAndDropListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="ContextMenu" Value="{StaticResource ShapeContextMenu}"/>
                                </Style>
                            </lists:BaseShapeDragAndDropListBox.ItemContainerStyle>
                            <lists:BaseShapeDragAndDropListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Margin="0,5,0,5"/>
                                </DataTemplate>
                            </lists:BaseShapeDragAndDropListBox.ItemTemplate>
                        </lists:BaseShapeDragAndDropListBox>
                    </Grid>
                </TabItem>
            </TabControl>
        </DataTemplate>
        <DataTemplate DataType="{x:Type core:Layer}">
            <TabControl>
                <TabItem Header="Layer">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Name" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="0" Grid.Column="0"/>
                        <TextBox Text="{Binding Path=Name, Mode=TwoWay}" Style="{StaticResource TextBoxLeftStyleKey}" Grid.Row="0" Grid.Column="1"/>
                        <TextBlock Text="IsVisible" Style="{StaticResource TextBlockLeftStyleKey}" Grid.Row="1" Grid.Column="0"/>
                        <CheckBox IsChecked="{Binding Path=IsVisible, Mode=TwoWay}" Style="{StaticResource CheckBoxStyleKey}" Grid.Row="1" Grid.Column="1"/>
                    </Grid>
                </TabItem>
                <TabItem Header="Owner">
                    <ContentControl Content="{Binding Path=Owner, Mode=TwoWay}"/>
                </TabItem>
                <TabItem Header="Shapes">
                    <TabControl>
                        <TabItem Header="Shapes">
                            <ListBox Name="shapes" ItemsSource="{Binding Path=Shapes}">
                                <ListBox.Resources>
                                    <DataTemplate DataType="{x:Type core:BaseShape}">
                                        <TextBlock Text="{Binding}"/>
                                    </DataTemplate>
                                </ListBox.Resources>
                            </ListBox>
                        </TabItem>
                        <TabItem Header="Selected">
                            <ContentControl Content="{Binding ElementName=shapes, Path=SelectedItem, Mode=TwoWay}"/>
                        </TabItem>
                    </TabControl>
                </TabItem>
            </TabControl>
        </DataTemplate>
    </Application.Resources>
</Application>
